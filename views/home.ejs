<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flavored</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="../css/style.css">
    <style>
        /* Chat button styles */
        #chatButton {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background-color: rgba(229, 168, 45, 0.936);
            border: none;
            border-radius: 50px;
            width: 60px;
            height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
            cursor: pointer;
            transition: all 0.3s ease;
        }

        #chatButton:hover {
            background-color: rgb(217, 171, 63);
        }

        /* Chat window styles */
        #chatWindow {
            position: fixed;
            bottom: 90px;
            right: 20px;
            width: 350px;
            height: 500px;
            background-color: #272625e7;
            border-radius: 10px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
            display: none;
            flex-direction: column;
            overflow: hidden;
        }

        #chatHeader {
            background-color: #efad42e7;
            color: white;
            padding: 10px;
            font-weight: bold;
            text-align: center;
        }

        #chatMessages {
            flex-grow: 1;
            padding: 10px;
            overflow-y: auto;
            background-color: #272625e7;
            color: white;

        }

        #chatInputContainer {
            padding: 10px;
            display: flex;
            gap: 5px;
            background-color: #272625e7;
            border-top: 1px solid #ddd;
        }

        #chatInput {
            flex-grow: 1;
            padding: 5px;
            border-radius: 5px;
            border: 1px solid #ddd;
            background-color: #272625e7;
            color: white;
        }

        #sendButton {
            background-color: #efad42e7;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 5px 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        #sendButton:hover {
            background-color: #fda81fe7;
        }
    </style>
</head>

<body>
    <div class="innerBody">
        <%- include ('./partials/navbar.ejs') %>
            <div class="BrandDescription">
                <div class="row align-items-center justify-content-center text-center">
                    <div class="col-lg-6 col-md-12">
                        <div class="container text-content">
                            <h1 class="display-4 fw-bold">Welcome to <br><img id="logo1" src="../images/logo1.png"
                                    alt=""> <br> Where Every Bite is a Journey</h1>
                            <p id="time" class="d-flex align-items-center justify-content-center text-center">
                                <img id="clock" src="../images/clock.png" alt="Clock Icon" class="me-2">
                                Serving from 9:00 am to 12:00 pm
                            </p>
                            <p class="mt-5">Experience food like never before! At Meal Tracker, we fuse the finest
                                ingredients with bold flavors to create mouthwatering dishes that excite your senses.
                                Whether you're here for our signature Burgers, savory Pizzas, or refreshing Drinks,
                                every dish is made with love, passion, and the freshest ingredients. Come, indulge, and
                                savor the flavors that define us!</p>

                        </div>
                    </div>
                </div>
            </div>
    </div>

    <!-- Chat Button -->
    <div id="chatButton" onclick="toggleChat()">
        <i class="fas fa-comments"></i>
    </div>

    <!-- Chat Window -->
    <div id="chatWindow">
        <div id="chatHeader">Chat with Us</div>
        <div id="chatMessages"></div>
        <div id="chatInputContainer">
            <input type="text" id="chatInput" placeholder="Type a message..." />
            <button id="sendButton">Send</button>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/js/all.min.js"></script>
    <style>
        /* Chat Message Styles */
        .message-container {
            display: flex;
            flex-direction: column;
            /* Change to column for vertical stacking */
            margin-bottom: 10px;
        }

        .admin-message {
            background-color: #efad42;
            /* Yellow/orange color for admin messages */
            color: black;
            padding: 10px;
            border-radius: 10px;
            max-width: 60%;
            /* Limit width for larger screens */
            align-self: flex-start;
            /* Align to left */
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            margin-bottom: 5px;
            /* Space between admin response and user query */
        }

        .user-message {
            background-color: #f0f0f0;
            /* Grey color for user messages */
            color: black;
            padding: 10px;
            border-radius: 10px;
            max-width: 60%;
            /* Limit width for larger screens */
            align-self: flex-end;
            /* Align to right */
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }

        small {
            display: block;
            font-size: 0.8em;
            margin-top: 5px;
            color: #666;
            /* Slightly lighter color for timestamps */
        }
    </style>
    <script>
        const userId = '<%= user._id %>'; // Get the user ID from the server-side variable

        const chatButton = document.getElementById('chatButton');
        const chatWindow = document.getElementById('chatWindow');
        const chatMessages = document.getElementById('chatMessages');
        const chatInput = document.getElementById('chatInput');
        const sendButton = document.getElementById('sendButton');

        let cachedResponses = []; // Store chat data to prevent multiple fetches

        sendButton.addEventListener("click", sendMessage);

        document.addEventListener('DOMContentLoaded', () => {
            prefetchUserResponses(); // Fetch responses when the page loads
        });

        function toggleChat() {
            chatWindow.style.display = chatWindow.style.display === 'flex' ? 'none' : 'flex';
            if (chatWindow.style.display === 'flex') {
                renderUserResponses(cachedResponses); // Use cached responses when chat is opened
            }
        }

        async function sendMessage() {
            const message = chatInput.value.trim();
            if (message) {
                const messageElement = document.createElement('div');
                messageElement.className = 'message-container'; // Wrap user message in a container

                const userMessageElement = document.createElement('div');
                userMessageElement.className = 'user-message'; // Add class for styling
                userMessageElement.innerHTML = `
                <div>${message}</div> <!-- Display the message immediately -->
                <small>${new Date().toLocaleString()}</small> <!-- Show current time -->
            `;

                messageElement.appendChild(userMessageElement); // Append user message to container
                chatMessages.appendChild(messageElement); // Append the whole message container to chat
                chatMessages.scrollTop = chatMessages.scrollHeight; // Auto-scroll

                chatInput.value = ''; // Clear input

                try {
                    const response = await fetch('http://localhost:3000/home/query', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ queryText: message }),
                    });

                    if (!response.ok) throw new Error(response.statusText);
                    const responseData = await response.json();
                    await prefetchUserResponses(); // Refresh the cached responses after sending a message
                    renderUserResponses(cachedResponses); // Re-render the chat with updated data
                } catch (error) {
                    console.error("Error sending message:", error);
                }
            }
        }

        async function prefetchUserResponses() {
            try {
                const response = await fetch(`http://localhost:3000/home/responses/${userId}`);
                if (!response.ok) throw new Error(response.statusText);

                const data = await response.json();
                cachedResponses = data; // Cache the responses
            } catch (error) {
                console.error("Error prefetching user responses:", error);
            }
        }

        function renderUserResponses(responses) {
            chatMessages.innerHTML = ''; // Clear previous messages to avoid duplication

            responses.forEach(res => {
                // Create a container for each conversation
                const messageContainer = document.createElement('div');
                messageContainer.className = 'message-container'; // Add class for layout

                // Left side for Admin Response
                const adminResponse = document.createElement('div');
                adminResponse.className = 'admin-message'; // Add class for styling
                adminResponse.innerHTML = `
                <div>${res.responseText}</div>
                <small>${new Date(res.responseDate).toLocaleString()}</small>
            `;

                // Right side for User Query
                const userQuery = document.createElement('div');
                userQuery.className = 'user-message'; // Add class for styling
                userQuery.innerHTML = `
                <div>${res.queryText}</div>
                <small>${new Date(res.queryDate).toLocaleString()}</small>
            `;

                // Append both admin response and user query to the message container
                messageContainer.appendChild(userQuery); // Append user query
                messageContainer.appendChild(adminResponse); // Append admin response
                chatMessages.appendChild(messageContainer); // Append the whole message container to chat
            });

            chatMessages.scrollTop = chatMessages.scrollHeight; // Auto-scroll to the bottom
        }
    </script>


</body>

</html>